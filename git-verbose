#!/bin/bash

# git verbose init
# git verbose add <file>
# git verbose commit <commit_message>
# git verbose tag <tag_name> <tag_message>

print_line() {
    local terminal_width=$(tput cols)
    printf '%*s\n' "$terminal_width" '' | tr ' ' '='
}
print_message() {
    # Define colors with bold and semantic meaning
    BOLD_RED='\033[1;31m'     # Error
    BOLD_GREEN='\033[1;32m'   # Success
    BOLD_YELLOW='\033[1;33m'  # Warning
    BOLD_BLUE='\033[1;34m'    # Information
    BOLD_CYAN='\033[1;36m'    # Highlight
    BOLD_MAGENTA='\033[1;35m' # Important
    BOLD_WHITE='\033[1;37m'   # Neutral
    RESET='\033[0m'
    local type=$1
    local message=$2

    case $type in
    error)
        echo -e "${BOLD_RED}${message}${RESET}"
        ;;
    success)
        echo -e "${BOLD_GREEN}${message}${RESET}"
        ;;
    warning)
        echo -e "${BOLD_YELLOW}${message}${RESET}"
        ;;
    info)
        echo -e "${BOLD_BLUE}${message}${RESET}"
        ;;
    highlight)
        echo -e "${BOLD_CYAN}${message}${RESET}"
        ;;
    important)
        echo -e "${BOLD_MAGENTA}${message}${RESET}"
        ;;
    neutral)
        echo -e "${BOLD_WHITE}${message}${RESET}"
        ;;
    *)
        echo -e "${BOLD_WHITE}${message}${RESET}"
        ;;
    esac
}


git_file_mode() {
        if [ -z "$1" ]; then
                print_message error "No file specified"
                return 1
        else
                if [[ -d $1 ]]; then
                        echo "040000"
                else
                        if [[ -x $1 ]]; then
                                echo "100755"
                        else
                                if [[ -f $1 ]]; then
                                        echo "100644"
                                else
                                        echo "120000"
                                fi
                        fi
                fi
        fi
}

git_read_object(){
        echo -e "Object Content:\n- Header:\n\t- type: $(git cat-file -t $1) # read it using git cat-file -t $1\n\t- size: $(git cat-file -s $1) # read it using git cat-file -s $1\n- Content: \n$(print_line)\n$(git cat-file -p $1) # read it using git cat-file -p $1\n$(print_line)"
}

git_read_index(){
      # Check if the current directory is a Git repository
      if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
      print_message error "Not inside a Git repository!"
      exit 1
      fi
      print_message highlight "Reading Git index..."
      # List all files in the index (staged files
      git ls-files --stage | while read -r mode hash stage path; do
      echo -e "File: $path\n\tMode: $mode\n\tHash: $hash"
done

}
git_verbose_init() {
        if [ -z "$1" ]; then
                repoPath=.git
        else
                repoPath=$1/.git
        fi
        dir=("objects" "refs" "refs/heads" "refs/tags")
        files=("HEAD" "config")
        mkdir -p $repoPath
        for i in "${dir[@]}"; do
                mkdir -p $repoPath/$i
                case $i in
                "objects")
                        print_message info "Created Database $repoPath/$i" 
                        ;;
                "refs/heads")
                        print_message info "Created Branches $repoPath/$i" 
                        ;;
                "refs/tags")
                        print_message info "Created Tags $repoPath/$i" 
                        ;;
                esac
        done

        for i in "${files[@]}"; do
                touch $repoPath/$i
                case $i in
                "HEAD")
                        print_message info "Created HEAD $repoPath/$i" 
                        echo "ref: refs/heads/master" >$repoPath/$i
                        ;;
                "config")
                        print_message info "Created Default Configs $repoPath/$i" 
                        echo "[core]" > $repoPath/$i
                        echo "repositoryformatversion = 0" >>$repoPath/$i
                        echo "filemode = true" >>$repoPath/$i
                        echo "bare = false" >>$repoPath/$i
                        echo "logallrefupdates = true" >>$repoPath/$i
                        ;;
                esac
        done
}

git_add() {
if [ -z "$1" ]; then
    print_message error "No file specified"
    return 1
elif [ ! -f "$1" ]; then
        print_message error "File Not Found"
        return 1	      
    fi
    filename=$1
    print_message highlight "Adding $filename To Git Object Database"
    cmd="git hash-object -w $filename"
    print_message highlight "Run: $cmd"
    output=$($cmd)
    if [[ -n $output ]]; then print_message success "Output: $output"; fi
    git_read_object $output
    print_message highlight "Adding $filename To Git Index"
    cmd="git update-index --add --cacheinfo $(git_file_mode $filename) $(git hash-object $filename) $filename"
    print_message highlight "Run: $cmd"
    output=$($cmd)
    if [[ -n $output ]]; then echo "Output: $output"; fi
    git_read_index
}

git_commit() {
        if [[ -z "$1" ]]; then
                echo "No commit message specified"
                return 1
        fi
        commit_msg=$1
        commit_msg_file=".git/COMMIT_EDITMSG"
        print_message highlight "Creating Tree From Index" 
        cmd="git write-tree"
        print_message highlight "Run: $cmd" 
        tree=$($cmd)
        if [[ -n $tree ]]; then print_message success "Output: $tree" ; fi
        git_read_object $tree
        print_message highlight "Creating Commit" 
        print_message info "Write Commit Message in $commit_msg_file"
        echo "$commit_msg" >$commit_msg_file 
        cmd="git commit-tree $tree -F $commit_msg_file"
        if [[ -n $(git rev-parse HEAD &> /dev/null)  ]]; then cmd="git commit-tree $tree -p $(git rev-parse HEAD) -F $commit_msg_file"; fi 
        commit=$($cmd)
        print_message highlight "Run: $cmd"
        if [[ -n $commit ]]; then print_message success "Output: $commit" ; fi
        git_read_object $commit
        print_message highlight "Updating HEAD" 
        cmd="git update-ref refs/heads/master $commit"
        print_message highlight "Run: $cmd" 
        print_message warning "NOTE: This is equivalent to just writing $commit to .git/refs/heads/master" 
        $cmd
}

git_tag() {
        if [[ -z "$1" && -z "$2" ]]; then
                return 1
        else
                tag_name=$1
                tag_message=$2
                tag_file=".git/$tag_name"
                echo "object $(git rev-parse refs/heads/master)" >$tag_file
                echo "type commit" >>$tag_file
                echo "tag $tag_name" >>$tag_file
                echo "tagger $(git config user.name) <$(git config user.email)> $(date +%s) $(date +%z)" >>$tag_file
                echo "" >>$tag_file
                echo "$tag_message" >>$tag_file

                print_message highlight "Creating Tag"
                print_message highlight "Creating Tag Object" 
                print_message info "Object Contents:"
                print_line 
                cat $tag_file
                print_line 
                cmd="git hash-object -w -t tag $tag_file"
                print_message highlight "Run: $cmd" 
                tag=$($cmd)
                if [[ -n $tag ]]; then print_message success "Output: $tag" ; fi
                print_message highlight "Creating Tag Reference" 
                cmd="git update-ref refs/tags/$tag_name $tag"
                print_message highlight "Run: $cmd" 
                print_message warning "NOTE This is equivalent to just writing $tag to .git/refs/tags/$tag_name" 
                output=$($cmd)
                rm $tag_file
        fi
}

usage() {
        echo "Usage: git verbose <command> [<args>]"
        echo ""
        echo "Available commands are:"
        echo "   init     <dir-name> Create an empty Git repository"
        echo "   add      <file-path> Add a file to the index"
        echo "   commit   <commit-message> Record changes to the repository"
        echo "   tag      <name> <message> Create a tag"
        echo ""
}

case $1 in
"init")
        git_verbose_init $2
        ;;
"add")
        git_add $2
        ;;
"commit")
        shift 1
        git_commit "$@"
        ;;
"tag")
        shift 1
        git_tag "$@"
        ;;
"--help")
        usage
        ;;
*)
        usage
        exit 1
        ;;
esac

